# -*- coding: utf-8 -*-
"""Deploying Diabetes Prediction Model Using Streamlit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PWNC9GuwZpps9XDBgXVQazXVDbv_IaY3

# **IMPORTING THE REQUIRED LIBRARIES**
"""

# IMPORTING THE DEPENDENCIES
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

!pip install scikit-learn==1.3.0

"""# **DATA COLLECTION AND PREPROCESSING**"""

# Loading the Diabetes Database to a pandas DataFrame
diabetes_dataset = pd.read_csv("/content/diabetes.csv")

# Displaying the first five rows of the dataset
diabetes_dataset.head()

# Counting the number of Datapoints
diabetes_dataset.shape

# Showing the statistics of the dataset
diabetes_dataset.describe()

# For "outcome" column we are checking the count of labels 0 and 1.
diabetes_dataset["Outcome"].value_counts()

"""**0** **----->** **NON** **DIABETIC**

**1** **----->** **DIABETIC**
"""

# Grouping the "outcome" with mean values.
diabetes_dataset.groupby("Outcome").mean()

# Separaing the data and labels
X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset["Outcome"]

print(X)

print(Y)

# Printing the columns of the dataset
for column in X.columns:
  print(column)

"""# **TRAIN-TEST SPLIT**"""

# Splitting the dataset in train and test dataset.
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, stratify=Y, random_state=2)

# Checking the Dimentions of the Data.
print(X.shape, X_train.shape, X_test.shape)

"""# **TRAINING THE MODEL**

# **SUPPORT VECTOR MACHINE MODEL (SVM)**
"""

# Using svm model
classifier = svm.SVC(kernel = "linear")

# Training the support vector machine classifier
classifier.fit(X_train, Y_train)

"""# **MODEL EVALUATION**

# **ACCURACY SCORE**
"""

# Accuracy score on training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("Accurary score of the training data: ", training_data_accuracy)

# Accuracy score on test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print("Accurary score of the test data: ", test_data_accuracy)

"""# **MAKING A PREDICTIVE SYSTEM**"""

input_data = (4,146,85,27,100,28.9,0.189,27)

# Changing the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = classifier.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==0):
  print("The person is not diabetic")
else:
  print("The person is diabetic")

"""# **SAVING THE TRAINED MODEL**"""

# Importing the Pickle library to save the model
import pickle

# Saving the model with name "trained_model"
filename = 'trained_model'

# Saving the model, and writing it in binary.
pickle.dump(classifier, open(filename, 'wb'))

# Loading the Saved Model
loaded_model = pickle.load(open('trained_model', 'rb'))

input_data = (4,146,85,27,100,28.9,0.189,27)

# Changing the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = loaded_model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==0):
  print("The person is not diabetic")
else:
  print("The person is diabetic")